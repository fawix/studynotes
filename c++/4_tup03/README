
Subsequently the initial files in this folder are:

hello.c
square.c
square.h
Tupfile


In order to initialize tup we have to:

tup init <--- this command in the top of our source tree
	      this command will create a .tup directory 
	      which is used to to store dependencies and 
	      manage the build system

tup upd <--- this command will run the build using the Tupfile 

Note how the Tupfile does not include the header file (square.h)
However if changes are made to the header file and we run tup upd
we can see that tup picks it up nicely 
(avoiding the messy confusion we have in make for example).


This piece from the doc example it:

"The trick is that tup instruments all commands that it executes in order to determine what files were actually read from (the inputs) and written to (the outputs). When the C preprocessor opens the header file, tup will notice that and automatically add the dependency."
